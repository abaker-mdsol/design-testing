{"version":3,"sources":["pages/landingPage.js","pages/checkmatePlaceholder.js","pages/TabbingSelectingFromList/sampleTableData.js","pages/TabbingSelectingFromList/TabbingSelectingFromList.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","className","to","React","Component","CheckmatePlaceholder","sampleTableData","TabbingSelectingFromList","state","itemChecked","e","console","log","heading","breadcrumb","header","type","map","row","name","uploadedBy","date","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6TAIaA,G,OAAb,iLAGI,OACI,yBAAKC,UAAU,qBACX,6BAAK,2CACL,4BACE,kBAAC,IAAD,CAAMC,GAAG,6BAAT,mCACA,kCACA,kCACA,yCAVd,GAAiCC,IAAMC,YCD1BC,EAAb,iLAGI,OACI,yBAAKJ,UAAU,uBAJvB,GAA0CE,IAAMC,W,0BCWjCE,EAdO,CAClB,CACI,KAAQ,iBACR,WAAc,QACd,KAAQ,YAEZ,CACI,KAAQ,iBACR,WAAc,QACd,KAAQ,aCFHC,EAAb,YAEE,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,YAAa,IAHH,EAFhB,uEASYC,GACRC,QAAQC,IAAI,QAVhB,+BAcI,OACI,yBAAKX,UAAU,IACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAYY,QAAQ,yCAAyCC,WAAY,kBAAC,IAAD,CAAMZ,GAAG,KAAT,UACzE,yBAAKD,UAAU,eACb,kBAAC,IAAD,CAAOc,OAAQ,uCAAf,UAGA,kBAAC,IAAD,CAAOA,OAAQ,uCACf,2BAAOd,UAAU,SACf,+BACE,4BACE,4BAEE,2BAAOe,KAAK,cAEd,oCACA,2CACA,sCAGJ,+BAEEV,EAAgBW,KAAI,SAAAC,GAAG,OACrB,4BACE,4BACE,2BAAOF,KAAK,cAEd,4BAAKE,EAAIC,MACT,4BAAKD,EAAIE,YACT,4BAAKF,EAAIG,mBA5C7B,GAA8ClB,IAAMC,WCYrCkB,MAbf,WACE,OACE,yBAAKrB,UAAU,kBACX,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsB,KAAK,IAAIC,OAAK,EAACC,UAAWzB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,4BAA4BE,UAAWlB,QCA3CmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.085df33e.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '@mdsol/sandman/assets/platform.css';\n\nexport class LandingPage extends React.Component {\n  \n  render() {\n    return (\n        <div className=\"landing-page-wrap\">\n            <div><h1>Prototypes</h1></div>\n            <ul>\n              <Link to=\"/TabbingSelectingFromList\">Tabbing and Selecting in Tables</Link>\n              <li>..</li>\n              <li>..</li>\n              <li>...</li>\n            </ul>\n        </div>\n      );\n  }   \n}\n","import React from 'react';\n// import { Link } from 'react-router-dom';\n\nexport class CheckmatePlaceholder extends React.Component {\n  \n  render() {\n    return (\n        <div className=\"checkmate-wrap\">\n          \n        </div>\n      );\n  }   \n}\n","var sampleTableData = [\n    {\n        \"name\": \"design-testing\",\n        \"uploadedBy\": \"Henry\",\n        \"date\": \"12.06.19\"\n    },\n    {\n        \"name\": \"design-testing\",\n        \"uploadedBy\": \"Henry\",\n        \"date\": \"12.03.19\"\n    }\n\n]\n\nexport default sampleTableData;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { CheckmatePlaceholder } from '../checkmatePlaceholder';\nimport PageHeader from '@mdsol/lego/lib/PageHeader';\nimport { Panel, Checkbox } from 'react-bootstrap';\nimport sampleTableData from './sampleTableData';\n\nexport class TabbingSelectingFromList extends React.Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      itemChecked: {},\n    }\n  }\n\n  selectAll(e) {\n    console.log('yo');\n  }\n\n  render() {\n    return (\n        <div className=\"\">\n          <CheckmatePlaceholder />\n          <PageHeader heading=\"Tabbing and Selecting Items in a Table\" breadcrumb={<Link to=\"/\">back</Link>} />\n          <div className=\"mcc-content\">\n            <Panel header={<h4>Legend</h4>}>\n                Legend\n            </Panel>\n            <Panel header={<h3>Select</h3>}>\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>\n                    {/* <input type=\"checkbox\" onChange={(e) => this.state.selectAll}></input> */}\n                    <input type=\"checkbox\"></input>\n                  </th>\n                  <th>Name</th>\n                  <th>Uploaded By</th>\n                  <th>Date</th>\n                </tr>\n              </thead>\n              <tbody>\n              {\n                sampleTableData.map(row => (\n                  <tr>\n                    <td>\n                      <input type=\"checkbox\"></input> \n                    </td>\n                    <td>{row.name}</td>\n                    <td>{row.uploadedBy}</td>\n                    <td>{row.date}</td>\n                  </tr>)\n                )\n              }\n              </tbody>\n              </table>  \n            </Panel>\n          </div>\n        </div>\n      );\n  }   \n}\n","import React from 'react';\nimport './App.scss';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { LandingPage } from './pages/landingPage';\nimport { TabbingSelectingFromList } from './pages/TabbingSelectingFromList/TabbingSelectingFromList';\n\nfunction App() {\n  return (\n    <div className=\"page-directory\">\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={LandingPage} />\n            <Route path=\"/TabbingSelectingFromList\" component={TabbingSelectingFromList} />            \n          </Switch>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}